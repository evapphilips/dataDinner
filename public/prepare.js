// Local variables
var currentTab = 0;
var currentNames = [];
var currentTables = [];
var prepQuestions = [];

// Store svg paths
var q1Symbol = ["M300.4,152.6c6.8,54-7.7,90.6-59.2,110.8c-25.9,10.2-58.3,19.2-89.9,31.8C72.7,326.4-8.7,238.1,3.2,154.3c4.7-33.2,15.3-80.1,45.7-105.6C92.3,12.1,113.1-8.1,154.9,7.1c24.9,9,58.3,11.9,79,24.2C294.8,67.4,294.8,107.9,300.4,152.6z", 
"M294.3,140.5c0,10.6,7.9,25.5,7.9,25.5s-17.1,13.6-20.4,21.6c-7.4,18.2,4.4,29.5,4.4,29.5s-12.8,0.9-22.2,14.3c-8.7,12.5-3.4,25.7-3.4,25.7s-12.8-3.9-24,2.2c-2.1,1.1-11.2,17.5-11.2,17.5s-21.4-3.5-27.3,0.3c-8.8,5.6-16,21.1-16,21.1s-22.6-6.9-25.9-6.9c-14,0-22,11.1-22,11.1s-13-13.3-23.4-18.9c-10.1-5.5-30.2,7.1-30.2,7.1s-3.8-17.3-9.9-25.3c-7-9.1-31.3-12.1-31.3-12.1s1.8-17.4-0.5-27.5c-2.6-11.2-18.7-15.4-18.7-15.4s6.6-22.8,1.3-31.6C15,167.8,2.9,160,2.9,160s9.8-12.9,14.5-24.4c5.4-13.2-3.3-22.9-3.3-22.9s9.7-6.4,16.7-17.6c9-14.4,2.3-24.8,2.3-24.8s18.8-0.2,24.8-5.4c12.6-10.8,3.6-25.2,3.6-25.2s18.9,5.3,27-2.3C94.7,31.6,101,14,101,14s19.4,7.5,28.4,5c16.2-4.5,24.7-15.2,24.7-15.2s4.8,10.6,14.8,12.7c9.9,2.1,23.2-8,23.2-8s7.6,13.5,17.3,20.2c11.2,7.8,25.5-3.9,25.5-3.9s-1.9,9.6,7.5,19c10.5,10.5,31.1,5.9,31.1,5.9s-2.3,15.4,4.6,22.3c7.2,7.2,19.3,6.2,19.3,6.2s-10.2,16.2-5.8,25.1c6.6,13.3,11.3,14.8,11.3,14.8S294.3,128.3,294.3,140.5z", 
"M79.9,12c1.4-0.3,4.7-0.7,8.6-0.7c7.6,0.1,11.3,2.3,17.2,2.9c4.3,0.5,9.7,0.4,17.3-0.7c20-3.1,28.5-13,40.8-11.4c14.4,1.9,15.3,14.9,33.1,20.6c16.4,5.2,26.2-10.8,35.4,0c10.8,12.6,6.2,16.9,18.5,27.7c14.5,12.7,26.6,10.7,33.1,20.8c9.4,14.6-4.4,25.9,3.1,47.7c6.1,17.9,14.9,19.6,15.1,33.1c0.2,13.5-10.8,14.9-15.8,32.3c-6.5,22.3,8,34.5,0,49.3c-7,13-17.7,3.8-33.9,20c-14.9,15-12.6,37.3-27.7,40c-16.9,3.1-21.6-7.7-46.2,0c-13.6,4.2-16.2,8.1-25.7,7.1c-11.1-1.2-6.6-8.6-19.7-12.4c-23.5-6.9-35.1,5.5-50.8-4.6c-15-9.6-12.5-31.3-30-43.9c-13.2-9.5-19.4-1.3-27.7-10.8c-9.4-10.7,0.8-24.4-6.2-46.2C11.5,161.4,1.5,162.7,2,147.5c0.4-12.7,5.5-12.3,11.7-29.2c6.2-17-4.5-28.2,4.6-44.6c7.7-13.9,16.9-7.7,33.9-24.6C66.9,34.3,67.2,14.5,79.9,12z",
"M302,152.6c-0.3,19-20.7,42.3-20.7,42.3s12.4,25.9,1.6,39.7c-14,17.8-34.8,20.3-34.8,20.3s-7.6,18.1-25.3,26.7c-22.3,10.9-37.5,3.2-37.5,3.2s-12.1,14.9-33,17.1c-26,2.7-45.4-15.1-45.4-15.1s-29.3,5.9-41.8-1.4c-18.1-10.7-18-34.9-18-34.9S28,244.2,14.9,218c-10-19.9-0.8-33.2-0.8-33.2S2.2,164.9,2,152.4c-0.3-22.3,17-36.3,17-36.3s-7-16.8,0.9-38.9c7.7-21.4,27.6-24.4,27.6-24.4s1.3-17,16.4-26.3c25.5-15.8,48.3-8.5,48.3-8.5S129.1,2,153,2c9.2,0,31.1,17.8,31.1,17.8s15.7-12.5,33.4-6.8c38.2,12.2,40.8,48.7,40.8,48.7s21.9-0.6,33.3,23.3c8.3,17.4-8.8,34.1-8.8,34.1S302.3,129.5,302,152.6z"];
var q2Symbol = ["#D25D50", "#E186A7", "#ABABCF", "#FF8D44", "#EACA81"];
var q3Symbol = ["M124.3,16c-14.4,5.1-29.3,7.1-44.3,10c0,0.1,0,0.2,0,0.3c-0.2,0.5-0.8,0.8-1.4,0.8c-1.8,0-3.5,0.2-5.2,0.3L71.1,28c-0.8,0.2-1.5,0.4-2.3,0.6c-1.5,0.4-3,0.9-4.4,1.4c1.2-0.4,2.4-0.7,3.6-1c1.2-0.3,2.4-0.6,3.6-0.8c0.7-0.2,1.4,0.1,1.5,0.6c0.1,0.5-0.4,1-1.2,1.2c-1.6,0.4-3.2,0.9-4.8,1.4c-1.6,0.5-3.2,1.1-4.8,1.6c-3.2,1.1-6.4,2-9.4,2.3c-1.7,0.9-3.2,1.9-4.7,2.9c-0.8,0.5-1.5,1-2.2,1.6c-0.7,0.5-1.4,1.1-2.1,1.6c-2.8,2.3-5.2,4.8-7.4,7.5c-4.4,5.4-7.5,11.4-9,17.5c0,0.3-0.2,0.5-0.4,0.5c-0.2,0.1-0.4-0.1-0.4-0.3c0.9-6.7,4-13.8,8.9-20c2.4-3.1,5.3-6.1,8.5-8.6c1.6-1.3,3.4-2.5,5.2-3.6c1.8-1.2,3.7-2.2,5.6-3.2c0.9-0.5,1.9-0.9,2.9-1.3c-3,0.6-6,1.5-9.1,2.6c-0.1,0.4-0.5,0.9-1,1.2c-1.2,0.9-2.5,1.7-3.7,2.6c0.1,0,0.2,0.1,0.2,0.2c0.2,0.4-0.1,0.9-0.6,1.3c-3.1,2-6,4.2-8.8,6.6c-0.1,0.1-0.1,0.1-0.2,0.2c-6.4,6.5-11.7,14-15.3,21.9c-3.6,7.9-5.3,16.4-4.5,24.2c0.2,0.2,0.2,0.5,0,0.7c-0.1,0.2-0.4,0.2-0.5,0c-0.2,0-0.4,0.1-0.4,0c-2.3-5.8-3.2-12.6-1.1-19.7c0.7-2.4,1.6-4.8,2.7-7.1c-1.6,2.1-3.3,4.1-4.9,6c-1.1,3.3-1.8,6.6-2.3,10c-0.5,3.3-0.8,6.7-1.2,10L7,89.9c0,0.6-0.2,1.1-0.6,1.2c-0.4,0.1-0.7-0.4-0.8-1c-1.3-6.3-1-13.1,0.8-19.6c1.7-6.5,4.7-12.7,8.5-18.3c3.8-5.6,8.4-10.7,13.4-15.3c2.5-2.3,5.2-4.4,8-6.4c1.4-1,2.8-2,4.3-2.9l4.3-2.7c4.7-2.7,9.4-5.1,14.4-7l1.8-0.7l1.9-0.7l3.7-1.3c2.5-0.7,5-1.5,7.6-2.1c1.5-0.4,2.9,0,3.1,0.9c0.2,0.9-0.8,2-2.3,2.4c-9.8,2.7-19.1,6.7-28,11.8c-1.9,1.2-3.9,2.3-5.7,3.5c-1.9,1.2-3.7,2.5-5.4,3.9c2.9-1.9,6-3.5,9.3-4.7c2.2-1.5,4.5-2.7,6.9-3.9c1.2-0.6,2.4-1.1,3.7-1.6c1.2-0.5,2.5-1,3.8-1.5c6.1-2.2,12.2-3.6,18.3-4.9c6.1-1.4,12.2-2.8,18.4-4.9c12.1-4,20.8-10.1,32.1-14.1c0.5-0.2,1.1-0.1,1.3,0.1c0.3,0.3,0.1,0.7-0.4,0.9c-10.8,4.7-20.6,9.9-32.1,14.5c-6.1,2.5-12.2,4.2-18.3,5.7c-6.1,1.6-12.3,3-18.5,5.1c-0.8,0.3-1.7,0.5-2.5,0.9c1.4-0.3,2.9-0.5,4.3-0.7l2.1-0.3c0.7-0.1,1.4-0.1,2.1-0.2c10.4-3.2,21-4.5,31.8-6.7c8.4-1.7,16.4-4.4,24.9-5.7c1.1-0.3,2.1,0,2.4,0.7C126,15,125.4,15.8,124.3,16z M21.4,51.5c0.9-1.7,1.9-3.4,3.1-5c-5,5.7-9.3,12-12.4,19C15.1,60.8,18.2,56,21.4,51.5z",
 "M118,90.3c-0.4-6.6-1.7-12.7-3.9-18.9c-2.2-6.2-5.3-12.4-9.3-18.3c-0.1,0.1-0.2,0.1-0.3,0.1c-0.5,0.1-1-0.3-1.3-0.9c-0.7-1.5-1.4-2.9-2.3-4.4c-1.9-2.3-4-4.5-6.2-6.5c1.7,1.7,3.4,3.4,4.8,5.3c0.5,0.5,0.5,1.2,0.1,1.5c-0.4,0.3-1.1,0.1-1.6-0.4c-2-2.3-4.5-4.6-6.9-6.7c-2.4-2.2-4.7-4.3-6.6-6.7C78.2,30.7,71.1,28.4,64,27c-7.1-1.4-14.3-1.7-21.5-1.4c-0.3,0-0.6-0.1-0.7-0.2c-0.1-0.2,0-0.4,0.2-0.4c7.6-1.1,15.6-1.2,23.7,0.2c8.1,1.3,16.2,4.1,23.6,8.4c0.9,0.5,1.8,1.1,2.6,1.7c-2.1-2.2-4.3-4.4-7-6.3c-0.4,0.1-1,0-1.6-0.2c-1.4-0.6-2.8-1.1-4.2-1.7c0,0.1,0,0.2,0,0.3c-0.2,0.4-0.8,0.4-1.4,0.1c-3.4-1.6-6.9-2.9-10.4-4.3c-0.1,0-0.2-0.1-0.2-0.1c-18.1-4.9-36.7-6.8-55.8-8.8c-0.3,0.1-0.7,0-0.8-0.2c-0.2-0.2-0.1-0.4,0.1-0.5c0-0.2,0-0.4,0.1-0.4c7.3-0.8,14.2-1.6,21.8-0.8c2.6,0.3,5.2,0.6,7.8,1c-2.6-1-5-2.1-7.1-3.4C26.5,9,19.5,8.6,13.1,6.7L13.3,7c-0.6-0.1-1.1-0.4-1.1-0.8c0-0.4,0.5-0.6,1.1-0.6C26,5.4,38.8,6.5,51.5,9.2c12.7,2.7,25.5,6.8,37.6,13c9.8,4.8,18.4,11.9,25.2,20.5c1,1.3,1.3,2.8,0.5,3.3c-0.8,0.5-2.1,0-3.2-1.2c-6.7-8-15-14.2-24.1-18.9c-2-1-4-2-6.1-2.9l-3.1-1.3l-3.1-1.2c3.1,1.5,6.1,3.3,8.9,5.3c4.8,2.2,9.4,5,13.5,8.5c4.9,4.2,9,9,12.7,14c3.7,5,7,10.3,10.3,16c3.2,5.6,6.1,10.8,8.2,16.6c2,5.8,3.3,12.3,2.1,19.5c-0.1,0.6-0.4,1.3-0.8,1.4c-0.4,0.1-0.6-0.2-0.5-0.9c0.4-3.4,0.3-6.8,0-10c-0.4-3.2-1.1-6.3-2.1-9.2c-2-5.8-4.8-11.1-8.1-16.2c-3.6-5.4-7-10.4-10.8-15.3c-3.8-4.9-7.9-9.6-12.7-13.9c-0.7-0.6-1.3-1.1-2-1.7c1.9,2.2,3.7,4.5,5.2,6.8c3.8,3.7,7,7.9,9.7,12.3c2.7,4.4,5.1,9,7,13.7c1.5,3.7,2.9,7.3,3.8,11.1c0.9,3.8,1.3,7.7,0.7,11.7c0,1-0.7,1.9-1.4,1.9C118.5,92,118,91.2,118,90.3z M54.7,14.8c2,0.1,3.9,0.4,5.8,0.7c-7.3-2-14.7-3.5-22.2-4.8C43.6,12.5,49.2,13.7,54.7,14.8z", 
 "M17.5,11.5c0.4,6.6,1.7,12.7,3.9,18.9c2.2,6.2,5.3,12.4,9.3,18.3c0.1-0.1,0.2-0.1,0.3-0.1c0.5-0.1,1,0.3,1.3,0.9c0.7,1.5,1.4,2.9,2.3,4.4c1.9,2.3,4,4.5,6.2,6.5c-1.7-1.7-3.4-3.4-4.8-5.3c-0.5-0.5-0.5-1.2-0.1-1.5c0.4-0.3,1.1-0.1,1.6,0.4c2,2.3,4.5,4.6,6.9,6.7c2.4,2.2,4.7,4.3,6.6,6.7c6.5,3.5,13.6,5.9,20.7,7.2c7.1,1.4,14.3,1.7,21.5,1.4c0.3,0,0.6,0.1,0.7,0.2c0.1,0.2,0,0.4-0.2,0.4C86,77.9,77.9,78,69.8,76.7c-8.1-1.3-16.2-4.1-23.6-8.4c-0.9-0.5-1.8-1.1-2.6-1.7c2.1,2.2,4.3,4.4,7,6.3c0.4-0.1,1,0,1.6,0.2c1.4,0.6,2.8,1.1,4.2,1.7c0-0.1,0-0.2,0-0.3c0.2-0.4,0.8-0.4,1.4-0.1c3.4,1.6,6.9,2.9,10.4,4.3c0.1,0,0.2,0.1,0.2,0.1c18.1,4.9,36.7,6.8,55.8,8.8c0.3-0.1,0.7,0,0.8,0.2c0.2,0.2,0.1,0.4-0.1,0.5c0,0.2,0,0.4-0.1,0.4c-7.3,0.8-14.2,1.6-21.8,0.8c-2.6-0.3-5.2-0.6-7.8-1c2.6,1,5,2.1,7.1,3.4c6.8,0.9,13.7,1.3,20.2,3.3l-0.2-0.3c0.6,0.1,1.1,0.4,1.1,0.8c0,0.4-0.5,0.6-1.1,0.6c-12.6,0.3-25.4-0.9-38.1-3.5c-12.7-2.7-25.5-6.8-37.6-13C36.6,74.8,28,67.7,21.2,59.1c-1-1.3-1.3-2.8-0.5-3.3c0.8-0.5,2.1,0,3.2,1.2c6.7,8,15,14.2,24.1,18.9c2,1,4,2,6.1,2.9l3.1,1.3l3.1,1.2c-3.1-1.5-6.1-3.3-8.9-5.3c-4.8-2.2-9.4-5-13.5-8.5c-4.9-4.2-9-9-12.7-14c-3.7-5-7-10.3-10.3-16c-3.2-5.6-6.1-10.8-8.2-16.6c-2-5.8-3.3-12.3-2.1-19.5C4.6,0.8,4.9,0.1,5.3,0c0.4-0.1,0.6,0.2,0.5,0.9c-0.4,3.4-0.3,6.8,0,10c0.4,3.2,1.1,6.3,2.1,9.2c2,5.8,4.8,11.1,8.1,16.2c3.6,5.4,7,10.4,10.8,15.3c3.8,4.9,7.9,9.6,12.7,13.9c0.7,0.6,1.3,1.1,2,1.7c-1.9-2.2-3.7-4.5-5.2-6.8c-3.8-3.7-7-7.9-9.7-12.3c-2.7-4.4-5.1-9-7-13.7c-1.5-3.7-2.9-7.3-3.8-11.1c-0.9-3.8-1.3-7.7-0.7-11.7c0-1,0.7-1.9,1.4-1.9C17.1,9.8,17.6,10.6,17.5,11.5z M80.9,86.9c-2-0.1-3.9-0.4-5.8-0.7c7.3,2,14.7,3.5,22.2,4.8C92,89.3,86.4,88.1,80.9,86.9z",
 "M6.7,87.9c14.4-5.1,29.3-7.1,44.3-10c0-0.1,0-0.2,0-0.3c0.2-0.5,0.8-0.8,1.4-0.8c1.8,0,3.5-0.2,5.2-0.3l2.3-0.5c0.8-0.2,1.5-0.4,2.3-0.6c1.5-0.4,3-0.9,4.4-1.4c-1.2,0.4-2.4,0.7-3.6,1c-1.2,0.3-2.4,0.6-3.6,0.8c-0.7,0.2-1.4-0.1-1.5-0.6c-0.1-0.5,0.4-1,1.2-1.2c1.6-0.4,3.2-0.9,4.8-1.4c1.6-0.5,3.2-1.1,4.8-1.6c3.2-1.1,6.4-2,9.4-2.3c1.7-0.9,3.2-1.9,4.7-2.9c0.8-0.5,1.5-1,2.2-1.6c0.7-0.5,1.4-1.1,2.1-1.6c2.8-2.3,5.2-4.8,7.4-7.5c4.4-5.4,7.5-11.4,9-17.5c0-0.3,0.2-0.5,0.4-0.5c0.2-0.1,0.4,0.1,0.4,0.3c-0.9,6.7-4,13.8-8.9,20c-2.4,3.1-5.3,6.1-8.5,8.6c-1.6,1.3-3.4,2.5-5.2,3.6C80.2,71,78.3,72,76.4,73c-0.9,0.5-1.9,0.9-2.9,1.3c3-0.6,6-1.5,9.1-2.6c0.1-0.4,0.5-0.9,1-1.2c1.2-0.9,2.5-1.7,3.7-2.6c-0.1,0-0.2-0.1-0.2-0.2c-0.2-0.4,0.1-0.9,0.6-1.3c3.1-2,6-4.2,8.8-6.6c0.1-0.1,0.1-0.1,0.2-0.2c6.4-6.5,11.7-14,15.3-21.9c3.6-7.9,5.3-16.4,4.5-24.2c-0.2-0.2-0.2-0.5,0-0.7c0.1-0.2,0.4-0.2,0.5,0c0.2,0,0.4-0.1,0.4,0c2.3,5.8,3.2,12.6,1.1,19.7c-0.7,2.4-1.6,4.8-2.7,7.1c1.6-2.1,3.3-4.1,4.9-6c1.1-3.3,1.8-6.6,2.3-10c0.5-3.3,0.8-6.7,1.2-10L124,14c0-0.6,0.2-1.1,0.6-1.2c0.4-0.1,0.7,0.4,0.8,1c1.3,6.3,1,13.1-0.8,19.6c-1.7,6.5-4.7,12.7-8.5,18.3c-3.8,5.6-8.4,10.7-13.4,15.3c-2.5,2.3-5.2,4.4-8,6.4c-1.4,1-2.8,2-4.3,2.9L86.1,79c-4.7,2.7-9.4,5.1-14.4,7l-1.8,0.7L68,87.3l-3.7,1.3c-2.5,0.7-5,1.5-7.6,2.1c-1.5,0.4-2.9,0-3.1-0.9c-0.2-0.9,0.8-2,2.3-2.4c9.8-2.7,19.1-6.7,28-11.8c1.9-1.2,3.9-2.3,5.7-3.5c1.9-1.2,3.7-2.5,5.4-3.9c-2.9,1.9-6,3.5-9.3,4.7c-2.2,1.5-4.5,2.7-6.9,3.9c-1.2,0.6-2.4,1.1-3.7,1.6c-1.2,0.5-2.5,1-3.8,1.5c-6.1,2.2-12.2,3.6-18.3,4.9c-6.1,1.4-12.2,2.8-18.4,4.9c-12.1,4-20.8,10.1-32.1,14.1c-0.5,0.2-1.1,0.1-1.3-0.1c-0.3-0.3-0.1-0.7,0.4-0.9c10.8-4.7,20.6-9.9,32.1-14.5c6.1-2.5,12.2-4.2,18.3-5.7c6.1-1.6,12.3-3,18.5-5.1c0.8-0.3,1.7-0.5,2.5-0.9c-1.4,0.3-2.9,0.5-4.3,0.7l-2.1,0.3c-0.7,0.1-1.4,0.1-2.1,0.2c-10.4,3.2-21,4.5-31.8,6.7c-8.4,1.7-16.4,4.4-24.9,5.7c-1.1,0.3-2.1,0-2.4-0.7C5.1,88.9,5.7,88.1,6.7,87.9z M109.6,52.4c-0.9,1.7-1.9,3.4-3.1,5c5-5.7,9.3-12,12.4-19C116,43.1,112.9,47.9,109.6,52.4z"];
var q4Symbol = [[["123.2","2","123.2","37.2"], ["62.5","18.5","80.1","49"], ["18.1","63.3","48.6","80.9"], ["2","124.3","37.2","124.3"], 
["18.5","185","49","167.4"], ["63.3","229.4","80.9","199"], ["124.3","245.5","124.3","210.4"], ["185","229","167.4","198.5"], ["229.4","184.2","199","166.6"],
["245.5","123.2","210.4","123.2"], ["229","62.5","198.5","80.1"], ["184.2","18.1","166.6","48.6"]],
[["M60.1,29.1c0,3.9-3.1,7-7,7s-7-3.1-7-7s3.1-7,7-7S60.1,25.2,60.1,29.1z M29.6,43.5c-3.7,1-6,4.8-5,8.6s4.8,6,8.6,5s6-4.8,5-8.6S33.3,42.5,29.6,43.5z M12.3,70.2c-3.4,1.9-4.5,6.2-2.6,9.6c1.9,3.4,6.2,4.5,9.6,2.6c3.4-1.9,4.5-6.2,2.6-9.6S15.7,68.3,12.3,70.2z M2.6,100.5c-2.7,2.7-2.7,7.2,0,9.9c2.7,2.7,7.2,2.7,9.9,0c2.7-2.7,2.7-7.2,0-9.9S5.3,97.7,2.6,100.5zM0.9,131.7c-1.9,3.4-0.8,7.6,2.6,9.6c3.4,1.9,7.6,0.8,9.6-2.6c1.9-3.4,0.8-7.6-2.6-9.6C7.2,127.2,2.9,128.3,0.9,131.7z M7.6,162.1c-1,3.7,1.2,7.6,5,8.6c3.7,1,7.6-1.2,8.6-5c1-3.7-1.2-7.6-5-8.6C12.4,156.2,8.6,158.4,7.6,162.1z M22.1,190.4c0,3.9,3.1,7,7,7s7-3.1,7-7s-3.1-7-7-7S22.1,186.5,22.1,190.4zM43.5,214c1,3.7,4.8,6,8.6,5c3.7-1,6-4.8,5-8.6s-4.8-6-8.6-5S42.5,210.2,43.5,214zM70.2,231.2c1.9,3.4,6.2,4.5,9.6,2.6c3.4-1.9,4.5-6.2,2.6-9.6c-1.9-3.4-6.2-4.5-9.6-2.6C69.4,223.6,68.3,227.9,70.2,231.2zM100.5,241c2.7,2.7,7.2,2.7,9.9,0c2.7-2.7,2.7-7.2,0-9.9c-2.7-2.7-7.2-2.7-9.9,0C97.7,233.8,97.7,238.2,100.5,241zM131.7,242.6c3.4,1.9,7.6,0.8,9.6-2.6c1.9-3.4,0.8-7.6-2.6-9.6c-3.4-1.9-7.6-0.8-9.6,2.6C127.2,236.4,128.3,240.7,131.7,242.6z M162.1,236c3.7,1,7.6-1.2,8.6-5c1-3.7-1.2-7.6-5-8.6c-3.7-1-7.6,1.2-8.6,5C156.2,231.1,158.4,235,162.1,236z M190.4,221.4c3.9,0,7-3.1,7-7c0-3.9-3.1-7-7-7s-7,3.1-7,7C183.4,218.3,186.5,221.4,190.4,221.4z M214,200.1c3.7-1,6-4.8,5-8.6c-1-3.7-4.8-6-8.6-5c-3.7,1-6,4.8-5,8.6S210.2,201.1,214,200.1z M231.2,173.3c3.4-1.9,4.5-6.2,2.6-9.6c-1.9-3.4-6.2-4.5-9.6-2.6c-3.4,1.9-4.5,6.2-2.6,9.6C223.6,174.1,227.9,175.3,231.2,173.3z M241,143.1c2.7-2.7,2.7-7.2,0-9.9c-2.7-2.7-7.2-2.7-9.9,0c-2.7,2.7-2.7,7.2,0,9.9C233.8,145.8,238.2,145.8,241,143.1z M242.6,111.9c1.9-3.4,0.8-7.6-2.6-9.6c-3.4-1.9-7.6-0.8-9.6,2.6s-0.8,7.6,2.6,9.6S240.7,115.2,242.6,111.9z M236,81.4c1-3.7-1.2-7.6-5-8.6c-3.7-1-7.6,1.2-8.6,5c-1,3.7,1.2,7.6,5,8.6S235,85.2,236,81.4z M221.4,53.1c0-3.9-3.1-7-7-7c-3.9,0-7,3.1-7,7s3.1,7,7,7C218.3,60.1,221.4,57,221.4,53.1z M200.1,29.6c-1-3.7-4.8-6-8.6-5c-3.7,1-6,4.8-5,8.6c1,3.7,4.8,6,8.6,5S201.1,33.3,200.1,29.6z M173.3,12.3c-1.9-3.4-6.2-4.5-9.6-2.6c-3.4,1.9-4.5,6.2-2.6,9.6c1.9,3.4,6.2,4.5,9.6,2.6S175.3,15.7,173.3,12.3z M143.1,2.6c-2.7-2.7-7.2-2.7-9.9,0c-2.7,2.7-2.7,7.2,0,9.9c2.7,2.7,7.2,2.7,9.9,0C145.8,9.8,145.8,5.3,143.1,2.6z M111.9,0.9c-3.4-1.9-7.6-0.8-9.6,2.6s-0.8,7.6,2.6,9.6s7.6,0.8,9.6-2.6S115.2,2.9,111.9,0.9z M81.4,7.6c-3.7-1-7.6,1.2-8.6,5s1.2,7.6,5,8.6c3.7,1,7.6-1.2,8.6-5S85.2,8.6,81.4,7.6z"]],
[["M35.5,50.4c4.6-6.6,10.9-10.8,18.8-12.7c5.4-1.3,10-15.3,2.5-13.5C46,26.8,36.4,33.4,30,42.6c-1.7,2.4-4.1,6.7-1.9,9.6C30.1,54.8,34.1,52.4,35.5,50.4L35.5,50.4z"],
["M94.9,14.9c9.2-0.4,18.4-0.8,27.6-1.2c3.5-0.1,6.2-3.3,7.3-6.4c0.7-1.9,1.4-7.5-2.2-7.3c-9.2,0.4-18.4,0.8-27.6,1.2c-3.5,0.1-6.2,3.3-7.3,6.4C92.1,9.5,91.4,15,94.9,14.9L94.9,14.9z"],
["M160.9,19.6c5.5,0.4,10.2,2.3,14.4,5.8c2.6,2.2,6.6-2.4,7.6-4.2c1.5-2.6,2.5-6.5-0.1-8.7C178,8.6,172.1,6.3,166,5.9C160.2,5.5,154.3,19.2,160.9,19.6L160.9,19.6z"],
["M202.8,43.6c12.8-1.1,24.4,7.8,26.3,20.5c0.5,3.6,4.9,2.2,6.7,0.7c2.9-2.3,4.3-6.1,3.7-9.7c-2.2-14.9-16.4-26.6-31.5-25.3c-3.5,0.3-6.2,3.2-7.3,6.4C200,38.1,199.2,43.9,202.8,43.6L202.8,43.6z"],
["M9.1,78.8c-3.5,8.3-5.8,17-7,26c-0.4,2.8,0.5,6,4,5.4c3.2-0.6,6.1-5,6.5-8.1c1-7.8,2.9-15.2,6-22.4c1-2.4,1.2-6.8-2.2-7.3C13,71.9,10.1,76.3,9.1,78.8L9.1,78.8z"],
["M0.5,136.4c-1.7,10.4,0.8,21.1,8.2,28.8c4.7,5,13.3-7.2,9.3-11.3c-5.2-5.5-8.2-12.5-7-20.1c0.5-2.8-0.6-6-4-5.4C3.7,128.9,1,133.3,0.5,136.4L0.5,136.4z"],
["M30.5,213.2c7.1,5.2,15.3,8.3,24,9.4c5.8,0.7,11.8-12.9,5.2-13.7c-8-1-15.1-3.9-21.7-8.6C33.2,196.7,25.4,209.5,30.5,213.2L30.5,213.2z"],
["M73.9,240.1c9.4,10.3,22.9,14.8,36.6,12.2c5.5-1,10.1-14.9,2.5-13.5c-10.9,2-22.3-1.9-29.8-10.1C78.6,223.7,70,235.8,73.9,240.1L73.9,240.1z"],
["M140,252.9c16.3,2.2,32.6-1,47-8.8c3-1.7,5.5-5.7,5.3-9.2c-0.2-3.2-2.6-4.8-5.5-3.2c-12.8,7-27.2,9.4-41.6,7.5C139.5,238.4,133.4,252,140,252.9L140,252.9z"],
["M210.3,225.7c7.5-6.6,13.2-14.7,16.8-24c1-2.5,1.2-6.7-2.2-7.3c-3.4-0.6-6.3,3.9-7.3,6.4c-2.2,5.7-5.7,10.5-10.3,14.5c-2.4,2.1-4.9,6.3-3.7,9.7C204.7,228.2,208.1,227.6,210.3,225.7L210.3,225.7z"],
["M245.9,167.4c4.4-9.5,6.3-19.8,5.7-30.2c-0.2-3.2-2.6-4.6-5.5-3.2c-3,1.5-5.5,5.8-5.3,9.2c0.5,8.3-0.9,15.8-4.3,23.3c-1.1,2.4-1.1,6.8,2.2,7.3C242,174.4,244.7,169.9,245.9,167.4L245.9,167.4z"],
["M236.9,84.8c4.8,6.2,6.9,13.2,6.4,21.1c-0.2,3.4,2.9,4.5,5.5,3.2c3.3-1.6,5.1-5.7,5.3-9.2c0.6-9.5-2.1-18.8-7.9-26.4C242.1,68.2,233.3,80.2,236.9,84.8L236.9,84.8z"]],
["M75.8,4.6c29.2,0,38.2-9,69.7,6.7s45,58.5,45,58.5c6.7,18,22.7,48.8,10.9,67.8c-11.8,18.9-46.4,46.8-68,48.4c-28.4,2.1-59.9,18-76.5,6.1S4.8,160,6,139.9s-9.5-35.5,0-60.4S10.7,39.2,32,23.9S75.8,4.6,75.8,4.6z"]]
var q5Symbol = ["#80AC90", "#1C4F60", "#FFFFFF"];
var q6Symbol = [["35%", "35%"], ["65%", "35%"], ["35%", "65%"], ["65%", "65%"]];
var q7Symbol = ["10", "20", "30", "40"];
var ans = ["", "", "", "", "", "", ""];


// When page first loads, get a list of current user names and table names
window.addEventListener('load', function () {
    // user names
    fetch('/user').then(result => {
        return result.json();
    }).then(result => {
        result.forEach((user) => {
            // add to currentNames array
            currentNames.push(user.name)
        })
    }).catch(err => {
        return err;
    })

    // table names
    fetch('/table').then(result => {
        return result.json();
    }).then(result => {
        result.forEach((table) => {
            // add to currentNames array
            currentTables.push(table.tableCode)
        })
    }).catch(err => {
        return err;
    })
})

// Registation completed
// access name and table inputs
var nameInput = document.getElementById('nameInput')
var tableInput = document.getElementById('tableInput')
// When name is completed
nameInput.addEventListener('blur', function (e) {
    currentNames.forEach((name) => {
        if(name === e.target.value){
            alert("Uh oh! That name has already been used.  Try a different username.");
        }
    })
    if(document.getElementById('tableInput').value !== "" ){
        document.getElementById("nextBtn").disabled = false;
    }
})
// When table is completed
tableInput.addEventListener('blur', function (e) {
    var foundMatch = false;
    currentTables.forEach((tableCode) => {
        if(tableCode === e.target.value){
            foundMatch = true;
            // get the questions from the appropriate table
            fetch('/table').then(result => {
                return result.json();
            }).then(result => {
                prepQuestions = [result[0].prepQuestion1, result[0].prepQuestion2, result[0].prepQuestion3, result[0].prepQuestion4, result[0].prepQuestion5, result[0].prepQuestion6, result[0].prepQuestion7]
            }).catch(err => {
                return err;
            })
            }
    })
    if(nameInput.value !== ""){
        document.getElementById("nextBtn").disabled = false;
    }
    if(!foundMatch){
        alert("Uh oh! There are not tables with that code.  Check that you have the correct table code.");
    }
})


// Page through pre questions
// Display the current tab
showTab(currentTab);
// When user clicks on next/prev button, page
// access buttons
var nextBtn = document.getElementById('nextBtn')
var prevBtn = document.getElementById('prevBtn')
// preform action on click
nextBtn.addEventListener('click', () => {nextPrev(1);});
prevBtn.addEventListener('click', () => {nextPrev(-1);});



// When submit is pressed post new user to users db collection
var prepSubmitBtn = document.getElementById("prepSubmitBtn")
prepSubmitBtn.addEventListener("click", (e) => {

    // get plate svg source
    var html = d3.select(".plateContainer")
        .attr("version", 1.1)
        .attr("xmlns", "http://www.w3.org/2000/svg")
        .node().parentNode.innerHTML;
    var imgsrc = 'data:image/svg+xml;base64,'+ btoa(html);
    // console.log(String(imgsrc))


    const newEntry = {
        role: 0,
        name: document.getElementById('nameInput').value,
        tableCode: document.getElementById('tableInput').value,
        prepAnswers: ans,
        plateSvg: String(imgsrc)
    }

    const options ={
        method: "POST",
        redirect: "follow",
        headers: {
            "Content-Type": "application/json",
        },
            body:JSON.stringify(newEntry)
        }

    fetch('/user/create_participant', options).then(result => {
        // return result.json()
        console.log(result.json())
    }).catch(err => {
        return err
    })
})


//////////////// Helper Functions /////////////////////
// Paging with next/previous button actions
function nextPrev(n){
    // get the tabs
    var tab = document.getElementsByClassName("tab");
    // if a field is not filled out, cancel click
    // if (n == 1 && !validateForm()) return false;
    // Hide the current tab:
    tab[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form...
    if (currentTab >= tab.length) {
        // ... the form gets submitted:
        document.getElementById("prepForm").submit();
        return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
}

// Show the approprate question tab
function showTab(n) {
    // get the tabs
    var tab = document.getElementsByClassName("tab");
    // show the approriate tab
    tab[n].style.display = "block";

    // show appropriate questions based on the table name and look at selection
    if(n>0){
        var id = "ques" + n;
        document.getElementById(id).innerHTML = prepQuestions[n-1];

        
        // when a radio button is pressed, find the appropriate path to change
        for(let i=0; i<tab[n].getElementsByTagName('input').length; i++){
            //options.push(document.getElementById("q" + n + (i+1)))
            document.getElementById("q" + n + (i+1)).addEventListener('change', () => {
                // adding symbol for question 1
                if(document.getElementById("q" + n + (i+1)).checked && (n==1)){
                    // remove base plate
                    d3.select(".plateContainer").selectAll(".basePlate").remove()
                    // remove already existing ans symbol
                    d3.select(".plateContainer").selectAll(".q1Symbol").remove()
                    // add new ans symbol
                    d3.select(".plateContainer").append("path")
                        .attr("class", "q1Symbol")
                        .attr("d", q1Symbol[i])
                        .attr("stroke", "black")
                        .attr("fill", "none");  
                    // add ans to ans array
                    ans[n-1] = i;                   
                }
                // changing color for question 2
                if(document.getElementById("q" + n + (i+1)).checked && (n==2)){
                    // change color
                    d3.select(".q1Symbol")
                        .style("fill", q2Symbol[i])
                        .style("stroke", "none")
                    // add ans to ans array
                    ans[n-1] = i;
                }
                // adding symbol for question 3
                if(document.getElementById("q" + n + (i+1)).checked && (n==3)){
                    // remove already existing ans symbol
                    d3.select(".plateContainer").selectAll(".q3Symbol").remove()
                    // add new ans symbol   
                    d3.select(".plateContainer").append("path")
                        .attr("class", "q3Symbol")
                        .attr("d", q3Symbol[i])
                        .attr("stroke", "white")
                        .attr("stroke-width", "2px")
                        .attr("fill", "none") 
                        .attr("opacity", ".5")
                        if(i==0){
                            d3.select(".q3Symbol").style("transform", "translate(10%, 15%)") 
                        }else if(i==1){
                            d3.select(".q3Symbol").style("transform", "translate(45%, 15%)") 
                        }else if(i==2){
                            d3.select(".q3Symbol").style("transform", "translate(10%, 55%)") 
                        }else if(i==3){
                            d3.select(".q3Symbol").style("transform", "translate(45%, 55%)") 
                        }
                    // add ans to ans array
                    ans[n-1] = i;
                }
                
                // adding symbol for question 4
                if(document.getElementById("q" + n + (i+1)).checked && (n==4)){
                    // remove already existing ans symbol
                    d3.select(".plateContainer").selectAll(".q4Symbol").remove()
                    // add new ans symbol
                    d3.select(".plateContainer").append('g')
                        .attr("class", "q4Symbol")
                    for(let j=0; j<q4Symbol[i].length; j++){
                        if(i==0){
                            d3.selectAll(".q4Symbol").append('line')
                                .attr("class", "q4Symbol")
                                .attr("x1", q4Symbol[i][j][0])
                                .attr("y1", q4Symbol[i][j][1])
                                .attr("x2", q4Symbol[i][j][2])
                                .attr("y2", q4Symbol[i][j][3])
                                .attr("stroke", "white")
                                .attr("stroke-width", "2px")
                                .attr("fill", "none") 
                                .style("transform", "translate(10%, 10%)")
                        }
                        if(i==1){
                            d3.selectAll(".q4Symbol").append('path')
                                .attr("class", "q4Symbol")
                                .attr("d", q4Symbol[i])
                                .attr("fill", "white")
                                .attr("stroke", "none") 
                                .style("transform", "translate(10%, 10%)")
                        }
                        if(i==2){
                            d3.selectAll(".q4Symbol").append('path')
                                .attr("class", "q4Symbol")
                                .attr("d", q4Symbol[i][j])
                                .attr("fill", "white")
                                .attr("stroke", "none") 
                                .style("transform", "translate(8%, 9%)")
                        }
                        if(i==3){
                            d3.selectAll(".q4Symbol").append('path')
                                .attr("class", "q4Symbol")
                                .attr("d", q4Symbol[i])
                                .attr("fill", "none")
                                .attr("stroke", "white") 
                                .style("transform", "translate(15%, 15%)")
                        }   
                    }
                    // add ans to ans array
                    ans[n-1] = i;
                }

                // changing color for question 5
                if(document.getElementById("q" + n + (i+1)).checked && (n==5)){
                    // change color
                    d3.selectAll(".q4Symbol")
                        .style("fill", q5Symbol[i])
                        .style("stroke", q5Symbol[i])
                        .attr("opacity", ".5")
                    // add ans to ans array
                    ans[n-1] = i;
                }

                // adding symbol for question 6
                if(document.getElementById("q" + n + (i+1)).checked && (n==6)){
                    // remove already existing symbol
                    d3.select(".plateContainer").selectAll(".q6Symbol").remove()
                    // add new symbol
                    d3.select(".plateContainer").append('circle')
                        .attr("class", "q6Symbol")
                        .attr("cx", q6Symbol[i][0])
                        .attr("cy", q6Symbol[i][1])
                        .attr("r", "40")
                        .attr("fill", "white")
                        .attr("opacity", ".2")
                    // add ans to ans array
                    ans[n-1] = i;
                }

                // chaingin size for question 7
                if(document.getElementById("q" + n + (i+1)).checked && (n==7)){
                    // chnage size
                    d3.selectAll(".q6Symbol")
                        .style("r", q7Symbol[i])
                    // add ans to ans array
                    ans[n-1] = i;
                }
            })
        }


    }

    // show the prev/next buttons
    if(n==0){
        // hide prev and submit
        document.getElementById("prevBtn").style.display = "none";
        document.getElementById('prepSubmitBtn').style.display = "none";
        // disable next
        if(document.getElementById('nameInput').value == "" && document.getElementById('tableInput').value == ""){
            // disable next
            document.getElementById("nextBtn").disabled = true;
        }
    }else{
        // show prev
        document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (tab.length - 1)) {
        // hide next and show submit
        document.getElementById("nextBtn").style.display = "none"
        document.getElementById("prepSubmitBtn").style.display = "inline";
    }else {
        // show next and hide submit
        document.getElementById("nextBtn").style.display = "inline"
        document.getElementById("prepSubmitBtn").style.display = "none";
      }  
}

